Middleware: In Express.js, middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the applicationâ€™s request-response cycle. These functions can execute any code, make changes to the request and the response objects, end the request-response cycle, and call the next middleware function in the stack. The order of middleware loading is important: middleware functions that are loaded first are also executed first. Middleware can perform a wide range of tasks such as error handling, logging, serving static files, parsing request bodies, etc.

Routes: In the context of a web application, routing refers to how an application's endpoints (URIs) respond to client requests. You define routing using methods of the Express app object that correspond to HTTP methods. Express.js uses a router to manage different routes in the application. For instance, you might want to send different HTTP responses based on the URL that the client accesses, or different HTTP methods at a certain URL. Each route can have one or more handler functions, which are executed when the route is matched.

HTTP Requests: HTTP stands for Hypertext Transfer Protocol and is used to structure requests and responses over the internet. The data being sent to the server with a POST, PUT or PATCH request is sent via the HTTP message body. Data inside the body can be accessed using the express middleware body-parser. HTTP requests are made up of: a request line (e.g., GET / HTTP/1.1, which indicates this is a GET request), request header, an empty line, and a request body.

BodyParser: The body-parser middleware module, added to Express.js as middleware, extracts the entire body portion of an incoming request and exposes it on req.body as something easier to interface with. This adds a .body property to the request parameter of the middleware function. The .body property is an object that contains the parsed data. This makes it easy to extract data from form fields.

View Engine: The view engine is a way for Express.js to plug in with various template engines. Template engines allow you to add data to a standard HTML template. Express supports a number of template engines, but in your code, you are using EJS (Embedded JavaScript). EJS is a simple templating engine that lets you generate HTML markup with plain JavaScript.

Static files: These are files that the server sends to the client as-is. Examples include CSS, JavaScript, and image files. By default, Express does not allow you to access these static files. To serve static files, use the express.static built-in middleware function in Express.

SQL Query: SQL stands for Structured Query Language. SQL is used to communicate with a database and perform tasks on a database such as to create a database, to create a table in a database, to retrieve data from a database, to insert records in a database, to delete records from a database, to update records in a database, etc. SQL is just a standard that most relational database management systems use.

Database initialization: This is the process of setting up your database for the first time. It often involves creating the necessary tables, establishing relationships between them, setting up primary and foreign keys, and possibly seeding the database with initial data to be used in testing.